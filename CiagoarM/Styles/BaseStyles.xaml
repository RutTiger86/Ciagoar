<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:convert="clr-namespace:CiagoarM.Commons.Converter"
                    >
    <convert:SettingMenuConverter x:Key="SetingConverter"/>
    <convert:SettingMenuImgConverter x:Key="SettingImgConverter"/>



    <Color x:Key="UnSelectMenuColor1">#f7f7ff</Color>
    <Color x:Key="UnSelectMenuColor2">#a8a9a8</Color>

    <Color x:Key="SelectMenuColor1">#00ce46</Color>
    <Color x:Key="SelectMenuColor2">#42ff82</Color>

    <Color x:Key="MouseOverMenuColor1">#3c773c</Color>
    <Color x:Key="MouseOverMenuColor2">#66b266</Color>

    <LinearGradientBrush x:Key="SelectMenuBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{DynamicResource SelectMenuColor1}" Offset="0" />
        <GradientStop Color="{DynamicResource SelectMenuColor2}" Offset="0.5" />
        <GradientStop Color="{DynamicResource SelectMenuColor1}" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="UnSelectMenuBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{DynamicResource UnSelectMenuColor1}" Offset="0" />
        <GradientStop Color="{DynamicResource UnSelectMenuColor2}" Offset="0.5" />
        <GradientStop Color="{DynamicResource UnSelectMenuColor1}" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="MouseOverMenuBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{DynamicResource MouseOverMenuColor1}" Offset="0" />
        <GradientStop Color="{DynamicResource MouseOverMenuColor2}" Offset="0.5" />
        <GradientStop Color="{DynamicResource MouseOverMenuColor1}" Offset="1" />
    </LinearGradientBrush>


    <Style x:Key="SmallFont" TargetType="{x:Type Control}">
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="MediumFont" TargetType="{x:Type Control}">
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontSize" Value="24"/>
    </Style>

    <Style x:Key="LargeFont" TargetType="{x:Type Control}">
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="FontSize" Value="36"/>
    </Style>


    <Style x:Key="TitleLabel" TargetType="{x:Type Label}" BasedOn="{StaticResource LargeFont}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="ContentLabel" TargetType="{x:Type Label}" BasedOn="{StaticResource MediumFont}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="DetailContentLabel" TargetType="{x:Type Label}" BasedOn="{StaticResource SmallFont}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="ConfirmMediumButton" TargetType="{x:Type Button}" BasedOn="{StaticResource MediumFont}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="ConfirmSmallButton" TargetType="{x:Type Button}" BasedOn="{StaticResource SmallFont}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="MediumTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MediumFont}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="MediumPasswordBox" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MediumFont}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="MediumCheckBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MediumFont}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="Margin" Value="2"/>
    </Style>

    <ControlTemplate TargetType="{x:Type RadioButton}" x:Key="LeftMenuButton">
        <Border Name="border" BorderBrush="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Background="{StaticResource ResourceKey=UnSelectMenuBrush}" CornerRadius="10,0,0,10" BorderThickness="0.5" Width="150">
            <ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="{StaticResource ResourceKey=MouseOverMenuBrush}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="border" Property="BorderThickness" Value="3" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter TargetName="border" Property="Background" Value="{StaticResource ResourceKey=SelectMenuBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type RadioButton}" x:Key="CenterMenuButton">
        <Border Name="border" BorderBrush="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Background="{StaticResource ResourceKey=UnSelectMenuBrush}" CornerRadius="0" BorderThickness="0.5" Width="150">
            <ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="{StaticResource ResourceKey=MouseOverMenuBrush}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="border" Property="BorderThickness" Value="3" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter TargetName="border" Property="Background" Value="{StaticResource ResourceKey=SelectMenuBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type RadioButton}" x:Key="RightMenuButton">
        <Border Name="border" BorderBrush="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Background="{StaticResource ResourceKey=UnSelectMenuBrush}" CornerRadius="0,10,10,0" BorderThickness="0.5" Width="150">
            <ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="{StaticResource ResourceKey=MouseOverMenuBrush}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="border" Property="BorderThickness" Value="3" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter TargetName="border" Property="Background" Value="{StaticResource ResourceKey=SelectMenuBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type Button}" x:Key="CommonButton">
        <Border Name="border" BorderBrush="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Background="{StaticResource ResourceKey=UnSelectMenuBrush}" CornerRadius="5,5,5,5" BorderThickness="0.5" Width="150">
            <ContentPresenter Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="{StaticResource ResourceKey=MouseOverMenuBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="border" Property="BorderThickness" Value="3" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter TargetName="border" Property="Background" Value="{StaticResource ResourceKey=SelectMenuBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="SearchTextBox" TargetType="{x:Type TextBox}">

        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" >
            <Grid.Resources>
                <!--Define look / layout for both TextBoxes here. I applied custom Padding and BorderThickness for my application-->
                <Style TargetType="TextBox">
                    <Setter Property="Padding" Value="4"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="0"/>
                </Style>
            </Grid.Resources>
            <TextBox x:Name="TbSearch"/>
            <TextBox x:Name="TbHint" Text="Search" Foreground="DimGray" Visibility="Hidden" IsHitTestVisible="False" Focusable="False"/>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="TbSearch" Property="Text" Value="{x:Static sys:String.Empty}"/>
                    <Condition SourceName="TbSearch" Property="IsKeyboardFocused" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter TargetName="TbHint" Property="Visibility" Value="Visible"/>
                </MultiTrigger.Setters>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="TbSearch" Property="Text" Value="{x:Null}"/>
                    <Condition SourceName="TbSearch" Property="IsKeyboardFocused" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter TargetName="TbHint" Property="Visibility" Value="Visible"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="SearchButtn" TargetType="{x:Type Button}">
        <Border x:Name="theBorder" BorderBrush="Transparent" BorderThickness="2">
            <Image Source="/Resources/Search_icon.png"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate TargetType="{x:Type RadioButton}" x:Key="SettingMenuButton">
        <Border Name="border" CornerRadius="0,25,25,0" Background="Transparent">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="50"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Image Source="{TemplateBinding Property=ContentControl.Content, Converter={StaticResource SettingImgConverter }}" Margin="5"/>
                <ContentPresenter Grid.Column="1" Content="{TemplateBinding ContentControl.Content}" HorizontalAlignment="Left"  VerticalAlignment="Center" Margin="20,0,0,0"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>            
            <Trigger Property="IsMouseOver" Value="True" >
                <Setter TargetName="border" Property="Background" Value="LightGray"/>
            </Trigger>
            
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="FontWeight" Value="Bold" />
                <Setter TargetName="border" Property="Background" Value="#B4CEF3"/>
                <Setter TargetName="border" Property="TextBlock.FontWeight" Value="Bold"/>
                <Setter TargetName="border" Property="TextBlock.Foreground" Value="#1967D2"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="FontWeight" Value="Bold" />
                <Setter TargetName="border" Property="Background" Value="#E8F0FE"/>
                <Setter TargetName="border" Property="TextBlock.FontWeight" Value="Bold"/>
                <Setter TargetName="border" Property="TextBlock.Foreground" Value="#1967D2"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>